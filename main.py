import streamlit as st
from model.populacao import Populacao
import time
import pandas as pd
from dotenv import load_dotenv
import os

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

def main():
    st.set_page_config(page_title="Algoritmo Gen√©tico", page_icon="üß¨", layout="wide")
    
    # T√≠tulo e descri√ß√£o
    st.title("üß¨ Evolu√ß√£o de C√≥digo com Algoritmo Gen√©tico")
    st.markdown("""
    Esta aplica√ß√£o utiliza algoritmos gen√©ticos para evoluir e melhorar automaticamente trechos de c√≥digo.
    """)
    
    # Sidebar com configura√ß√µes
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        language = st.selectbox("Linguagem", ["python", "javascript", "java"], index=0)
        pop_size = st.slider("Tamanho da popula√ß√£o", 1, 20, 3)
        num_generations = st.slider("N√∫mero de gera√ß√µes", 1, 50, 2)
        mutation_rate = st.slider("Taxa de muta√ß√£o", 0.0, 1.0, 0.1)
        
    # √Årea de c√≥digo base
    st.subheader("üìù C√≥digo Base")
    base_code = st.text_area("Insira o c√≥digo base para evolu√ß√£o:", 
                           """def somar_lista(lista):
    total = 0
    for numero in lista:
        total += numero
    return total""",
                           height=200)
    
    # Espa√ßo para resultados
    result_placeholder = st.empty()
    progress_bar = st.progress(0)
    log_placeholder = st.empty()
    
    # Bot√£o para executar
    if st.button("‚ñ∂Ô∏è Executar Algoritmo Gen√©tico"):
        if not base_code.strip():
            st.error("Por favor, insira um c√≥digo base v√°lido.")
            return
            
        with st.spinner("Executando..."):
            log_messages = []
            
            # Inicializa√ß√£o
            log_messages.append("üîß Gerando popula√ß√£o inicial...")
            log_placeholder.code("\n".join(log_messages))
            progress_bar.progress(5)
            
            pop = Populacao(language)
            pop.gerar_populacao_inicial(base_code, tamanho=pop_size)
            
            # Evolu√ß√£o
            for gen in range(num_generations):
                progress = 5 + int((gen / num_generations) * 90)
                progress_bar.progress(progress)
                
                log_messages.append(f"\nüìà Evoluindo gera√ß√£o {gen + 1}/{num_generations}...")
                log_placeholder.code("\n".join(log_messages))
                
                pop.evoluir()
                
                # Simula um tempo de processamento para visualiza√ß√£o
                time.sleep(0.5)
                
                # Atualiza com informa√ß√µes da gera√ß√£o
                log_messages.append(f"‚úÖ Gera√ß√£o {gen + 1} completada!")
                log_placeholder.code("\n".join(log_messages))
            
            # Resultado final
            progress_bar.progress(100)
            log_messages.append("\nüéØ Evolu√ß√£o conclu√≠da!")
            log_placeholder.code("\n".join(log_messages))
            
            # Exibe o melhor algoritmo
            st.subheader("üèÜ Melhor Algoritmo Encontrado")
            melhor = pop.melhor_individuo()
            if melhor:
                st.code(melhor.codigo, language=language)
                
                # Bot√£o para download
                st.download_button(
                    label="‚¨áÔ∏è Baixar Melhor Algoritmo",
                    data=melhor.codigo,
                    file_name="melhor_algoritmo.py",
                    mime="text/x-python"
                )
            else:
                st.error("Nenhum algoritmo v√°lido foi encontrado na evolu√ß√£o.")
            
            # Estat√≠sticas (simuladas - voc√™ pode adaptar com dados reais da sua implementa√ß√£o)
            st.subheader("üìä Estat√≠sticas da Evolu√ß√£o")
            stats_data = {
                "Gera√ß√£o": list(range(1, num_generations+1)),
                "Fitness": [0.8 + (i * 0.05) for i in range(num_generations)],  # Exemplo
                "Diversidade": [0.9 - (i * 0.03) for i in range(num_generations)]  # Exemplo
            }
            stats_df = pd.DataFrame(stats_data)
            st.line_chart(stats_df.set_index("Gera√ß√£o"))

if __name__ == "__main__":
    main()